CREATE OR REPLACE PROCEDURE manage_claims_status(
    claim_ids ARRAY,
    action STRING,
    changed_by STRING,
    reason STRING,
    OUT results ARRAY
)
LANGUAGE SQL
AS
$$
DECLARE
    claim_rec VARIANT;
    result_entry VARIANT;
    current_status STRING;
    batch_id STRING;
    run_timestamp TIMESTAMP_NTZ;
    error_type STRING;
    error_msg STRING;
BEGIN
    LET results = ARRAY_CONSTRUCT();
    LET batch_id = UUID_STRING();
    LET run_timestamp = CURRENT_TIMESTAMP;

    FOR claim_rec IN (SELECT VALUE::STRING AS CLAIM_ID FROM TABLE(FLATTEN(INPUT => claim_ids))) DO
        BEGIN
            BEGIN TRANSACTION;

            -- Validate existence based on action
            IF action IN ('ACCEPT', 'REJECT') THEN
                IF NOT EXISTS (SELECT 1 FROM CLAIMS_QUEUE_REQUEST WHERE CEID = claim_rec.CLAIM_ID) THEN
                    LET error_type = 'NOT_FOUND';
                    LET error_msg = 'Claim not found in CLAIMS_QUEUE_REQUEST';
                    RAISE error_msg;
                END IF;
            ELSIF action = 'REINSTATE' THEN
                IF NOT EXISTS (SELECT 1 FROM CLAIMS_MASTER WHERE CEID = claim_rec.CLAIM_ID) THEN
                    LET error_type = 'NOT_FOUND';
                    LET error_msg = 'Claim not found in CLAIMS_MASTER';
                    RAISE error_msg;
                END IF;
            ELSIF action IN ('INVESTIGATE', 'CLOSE', 'MANAGER_REJECT') THEN
                IF NOT EXISTS (SELECT 1 FROM CLAIMS_MANAGER_REQUEST WHERE CEID = claim_rec.CLAIM_ID) THEN
                    LET error_type = 'NOT_FOUND';
                    LET error_msg = 'Claim not found in CLAIMS_MANAGER_REQUEST';
                    RAISE error_msg;
                END IF;
            ELSE
                LET error_type = 'INVALID_ACTION';
                LET error_msg = 'Unknown action: ' || action;
                RAISE error_msg;
            END IF;

            -- Process actions
            IF action = 'ACCEPT' THEN
                SELECT STATUS INTO current_status FROM CLAIMS_QUEUE_REQUEST WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_MANAGER_REQUEST (
                    CEID, CLIENT_ID, CLIENT, CLAIM_TYPE, FUND_ID, CUSTODY_ACCOUNT_NO, CUSTODIAN_NAME,
                    CLAIM_DATE, CLAIM_ENG_GEN_DATE, CLAIM_ENG_GEN_TIME, AGE, AGE_SETTLEMENT, INITIATOR,
                    LOCAL_AMOUNT, LOCAL_CURRENCY, AMOUNT_TOTAL_USD, STATUS, AGE_OF_CLAIM, LIABLE_PARTY,
                    LIABLE_PARTY_SUGGESTION, LIABLE_PARTY_CONTACT, LIABLE_PARTY_ESCALATION_CONTACT,
                    LATEST_COMMENTS, KINGFIELD_COMMENT, LAST_ACTIONED_DATE, NEXT_ACTION_DATE,
                    ACTUAL_SETTLEMENT_DATE, REFERENCE_SOURCE, NEXT_OWNER, AMOUNT_CATEGORY_USD_EQ,
                    AGE_CATEGORY, CLAIMS_ANALYST, CLAIMS_MANAGER, UPDATED_USER, EXCEPTION_CODE,
                    UPDATED_TIME, RECEIVED_MODE, CLAIM_SOURCE, ERROR_MESSAGE
                )
                SELECT
                    CEID, CLIENT_ID, CLIENT, CLAIM_TYPE, FUND_ID, CUSTODY_ACCOUNT_NO, CUSTODIAN_NAME,
                    CLAIM_DATE, CLAIM_ENG_GEN_DATE, CLAIM_ENG_GEN_TIME, AGE, AGE_SETTLEMENT, INITIATOR,
                    LOCAL_AMOUNT, LOCAL_CURRENCY, AMOUNT_TOTAL_USD, 'NEW', AGE_OF_CLAIM, LIABLE_PARTY,
                    LIABLE_PARTY_SUGGESTION, LIABLE_PARTY_CONTACT, LIABLE_PARTY_ESCALATION_CONTACT,
                    LATEST_COMMENTS, KINGFIELD_COMMENT, LAST_ACTIONED_DATE, NEXT_ACTION_DATE,
                    ACTUAL_SETTLEMENT_DATE, REFERENCE_SOURCE, NEXT_OWNER, AMOUNT_CATEGORY_USD_EQ,
                    AGE_CATEGORY, CLAIMS_ANALYST, CLAIMS_MANAGER, changed_by, EXCEPTION_CODE,
                    CURRENT_TIMESTAMP, RECEIVED_MODE, CLAIM_SOURCE, ERROR_MESSAGE
                FROM CLAIMS_MASTER WHERE CEID = claim_rec.CLAIM_ID;

                DELETE FROM CLAIMS_QUEUE_REQUEST WHERE CEID = claim_rec.CLAIM_ID;

                UPDATE CLAIMS_MASTER SET STATUS = 'ACCEPTED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_QUEUE_AUDIT
                SELECT
                    UUID_STRING(), q.STATUS, 'ACCEPTED', changed_by, CURRENT_TIMESTAMP, reason,
                    q.CEID, q.CLIENT_ID, q.CLIENT, q.CLAIM_TYPE, q.FUND_ID, q.CUSTODY_ACCOUNT_NO, q.CUSTODIAN_NAME,
                    q.CLAIM_DATE, q.CLAIM_ENG_GEN_DATE, q.CLAIM_ENG_GEN_TIME, q.AGE, q.INITIATOR,
                    q.LOCAL_AMOUNT, q.LOCAL_CURRENCY, q.AMOUNT_TOTAL_USD, q.STATUS, q.LATEST_COMMENTS,
                    q.HISTORICAL_COMMENTS, q.UPDATED_USER, q.EXCEPTION_CODE, q.UPDATED_TIME, q.RECEIVED_MODE,
                    q.CLAIM_SOURCE, q.ERROR_MESSAGE
                FROM CLAIMS_QUEUE_REQUEST q WHERE q.CEID = claim_rec.CLAIM_ID;

            ELSIF action = 'REJECT' THEN
                SELECT STATUS INTO current_status FROM CLAIMS_QUEUE_REQUEST WHERE CEID = claim_rec.CLAIM_ID;

                DELETE FROM CLAIMS_QUEUE_REQUEST WHERE CEID = claim_rec.CLAIM_ID;

                UPDATE CLAIMS_MASTER SET STATUS = 'REJECTED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_QUEUE_AUDIT
                SELECT
                    UUID_STRING(), q.STATUS, 'REJECTED', changed_by, CURRENT_TIMESTAMP, reason,
                    q.CEID, q.CLIENT_ID, q.CLIENT, q.CLAIM_TYPE, q.FUND_ID, q.CUSTODY_ACCOUNT_NO, q.CUSTODIAN_NAME,
                    q.CLAIM_DATE, q.CLAIM_ENG_GEN_DATE, q.CLAIM_ENG_GEN_TIME, q.AGE, q.INITIATOR,
                    q.LOCAL_AMOUNT, q.LOCAL_CURRENCY, q.AMOUNT_TOTAL_USD, q.STATUS, q.LATEST_COMMENTS,
                    q.HISTORICAL_COMMENTS, q.UPDATED_USER, q.EXCEPTION_CODE, q.UPDATED_TIME, q.RECEIVED_MODE,
                    q.CLAIM_SOURCE, q.ERROR_MESSAGE
                FROM CLAIMS_QUEUE_REQUEST q WHERE q.CEID = claim_rec.CLAIM_ID;

            ELSIF action = 'REINSTATE' THEN
                UPDATE CLAIMS_MASTER SET STATUS = 'OUTSTANDING', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_QUEUE_REQUEST (
                    CEID, CLIENT_ID, CLIENT, CLAIM_TYPE, FUND_ID, CUSTODY_ACCOUNT_NO, CUSTODIAN_NAME,
                    CLAIM_DATE, CLAIM_ENG_GEN_DATE, CLAIM_ENG_GEN_TIME, AGE, INITIATOR,
                    LOCAL_AMOUNT, LOCAL_CURRENCY, AMOUNT_TOTAL_USD, STATUS, LATEST_COMMENTS,
                    HISTORICAL_COMMENTS, UPDATED_USER, EXCEPTION_CODE, UPDATED_TIME,
                    RECEIVED_MODE, CLAIM_SOURCE, ERROR_MESSAGE
                )
                SELECT
                    CEID, CLIENT_ID, CLIENT, CLAIM_TYPE, FUND_ID, CUSTODY_ACCOUNT_NO, CUSTODIAN_NAME,
                    CLAIM_DATE, CLAIM_ENG_GEN_DATE, CLAIM_ENG_GEN_TIME, AGE, INITIATOR,
                    LOCAL_AMOUNT, LOCAL_CURRENCY, AMOUNT_TOTAL_USD, 'OUTSTANDING', LATEST_COMMENTS,
                    HISTORICAL_COMMENTS, changed_by, EXCEPTION_CODE, CURRENT_TIMESTAMP,
                    RECEIVED_MODE, CLAIM_SOURCE, ERROR_MESSAGE
                FROM CLAIMS_MASTER WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_QUEUE_AUDIT
                SELECT
                    UUID_STRING(), 'REJECTED', 'OUTSTANDING', changed_by, CURRENT_TIMESTAMP, reason,
                    q.CEID, q.CLIENT_ID, q.CLIENT, q.CLAIM_TYPE, q.FUND_ID, q.CUSTODY_ACCOUNT_NO, q.CUSTODIAN_NAME,
                    q.CLAIM_DATE, q.CLAIM_ENG_GEN_DATE, q.CLAIM_ENG_GEN_TIME, q.AGE, q.INITIATOR,
                    q.LOCAL_AMOUNT, q.LOCAL_CURRENCY, q.AMOUNT_TOTAL_USD, q.STATUS, q.LATEST_COMMENTS,
                    q.HISTORICAL_COMMENTS, q.UPDATED_USER, q.EXCEPTION_CODE, q.UPDATED_TIME, q.RECEIVED_MODE,
                    q.CLAIM_SOURCE, q.ERROR_MESSAGE
                FROM CLAIMS_MASTER q WHERE q.CEID = claim_rec.CLAIM_ID;

            ELSIF action = 'INVESTIGATE' THEN
                UPDATE CLAIMS_MANAGER_REQUEST SET STATUS = 'UNDER_INVESTIGATION', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_MANAGER_AUDIT
                SELECT
                    UUID_STRING(), m.STATUS, 'UNDER_INVESTIGATION', changed_by, CURRENT_TIMESTAMP, reason,
                    m.CEID, m.CLIENT_ID, m.CLIENT, m.CLAIM_TYPE, m.FUND_ID, m.CUSTODY_ACCOUNT_NO, m.CUSTODIAN_NAME,
                    m.CLAIM_DATE, m.CLAIM_ENG_GEN_DATE, m.CLAIM_ENG_GEN_TIME, m.AGE, m.AGE_SETTLEMENT, m.INITIATOR,
                    m.LOCAL_AMOUNT, m.LOCAL_CURRENCY, m.AMOUNT_TOTAL_USD, m.STATUS, m.AGE_OF_CLAIM, m.LIABLE_PARTY,
                    m.LIABLE_PARTY_SUGGESTION, m.LIABLE_PARTY_CONTACT, m.LIABLE_PARTY_ESCALATION_CONTACT,
                    m.LATEST_COMMENTS, m.KINGFIELD_COMMENT, m.LAST_ACTIONED_DATE, m.NEXT_ACTION_DATE,
                    m.ACTUAL_SETTLEMENT_DATE, m.REFERENCE_SOURCE, m.NEXT_OWNER, m.AMOUNT_CATEGORY_USD_EQ,
                    m.AGE_CATEGORY, m.CLAIMS_ANALYST, m.CLAIMS_MANAGER, m.UPDATED_USER, m.EXCEPTION_CODE,
                    m.UPDATED_TIME, m.RECEIVED_MODE, m.CLAIM_SOURCE, m.ERROR_MESSAGE
                FROM CLAIMS_MANAGER_REQUEST m WHERE m.CEID = claim_rec.CLAIM_ID;

            ELSIF action = 'CLOSE' THEN
                UPDATE CLAIMS_MANAGER_REQUEST SET STATUS = 'CLOSED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                UPDATE CLAIMS_MASTER SET STATUS = 'CLOSED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_MANAGER_AUDIT
                SELECT
                    UUID_STRING(), m.STATUS, 'CLOSED', changed_by, CURRENT_TIMESTAMP, reason,
                    m.*
                FROM CLAIMS_MANAGER_REQUEST m WHERE m.CEID = claim_rec.CLAIM_ID;

            ELSIF action = 'MANAGER_REJECT' THEN
                UPDATE CLAIMS_MANAGER_REQUEST SET STATUS = 'REJECTED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                UPDATE CLAIMS_MASTER SET STATUS = 'REJECTED', UPDATED_USER = changed_by, UPDATED_TIME = CURRENT_TIMESTAMP
                WHERE CEID = claim_rec.CLAIM_ID;

                INSERT INTO CLAIMS_MANAGER_AUDIT
                SELECT
                    UUID_STRING(), m.STATUS, 'REJECTED', changed_by, CURRENT_TIMESTAMP, reason,
                    m.*
                FROM CLAIMS_MANAGER_REQUEST m WHERE m.CEID = claim_rec.CLAIM_ID;

            END IF;

            COMMIT;

            LET result_entry = OBJECT_CONSTRUCT('claim_id', claim_rec.CLAIM_ID, 'status', 'SUCCESS', 'message', NULL);
            LET results = ARRAY_APPEND(results, result_entry);

            INSERT INTO CLAIMS_ACTION_LOG (BATCH_ID, CLAIM_ID, ACTION, STATUS, MESSAGE, CHANGED_BY, RUN_AT)
            VALUES (batch_id, claim_rec.CLAIM_ID, action, 'SUCCESS', NULL, changed_by, run_timestamp);

        EXCEPTION
            WHEN ERROR THEN
                ROLLBACK;

                IF error_type IS NULL THEN
                    LET error_type = 'SQL_ERROR';
                    LET error_msg = ERROR_MESSAGE();
                END IF;

                LET result_entry = OBJECT_CONSTRUCT(
                    'claim_id', claim_rec.CLAIM_ID,
                    'status', 'FAILED',
                    'error_type', error_type,
                    'message', error_msg
                );
                LET results = ARRAY_APPEND(results, result_entry);

                INSERT INTO CLAIMS_ACTION_LOG (BATCH_ID, CLAIM_ID, ACTION, STATUS, MESSAGE, CHANGED_BY, RUN_AT)
                VALUES (batch_id, claim_rec.CLAIM_ID, action, error_type, error_msg, changed_by, run_timestamp);

                LET error_type = NULL;
                LET error_msg = NULL;
        END;
    END FOR;

END;
$$;

CREATE TABLE IF NOT EXISTS CLAIMS_ACTION_LOG (
    BATCH_ID STRING NOT NULL,            -- unique identifier for each multi-claim run
    CLAIM_ID STRING NOT NULL,            -- the CEID of the claim processed
    ACTION STRING NOT NULL,              -- action type (ACCEPT, REJECT, etc.)
    STATUS STRING NOT NULL,              -- 'SUCCESS', 'FAILED', or error category like 'NOT_FOUND', 'SQL_ERROR'
    MESSAGE STRING,                      -- error message or NULL on success
    CHANGED_BY STRING NOT NULL,          -- user or system triggering the procedure
    RUN_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP -- timestamp of when this log entry was created
);

