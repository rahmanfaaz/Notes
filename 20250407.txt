# ddl_converter_app.py - Streamlit Smart Oracle to Snowflake Code Converter

import streamlit as st
import re
import sqlglot
from sqlglot import parse_one, transpile, exp

def intelligent_convert_oracle_to_snowflake(sql_code: str) -> str:
    try:
        # Attempt to parse Oracle SQL
        transpiled = transpile(sql_code, read='oracle', write='snowflake')
        return "\n".join(transpiled)
    except Exception as e:
        return f"-- Error during intelligent conversion: {str(e)}"

def fallback_regex_conversion(ddl: str) -> str:
    try:
        ddl = re.sub(r"VARCHAR2", "VARCHAR", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"NVARCHAR2", "VARCHAR", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"NUMBER\((\d+),(\d+)\)", r"NUMBER(\1,\2)", ddl)
        ddl = re.sub(r"NUMBER\((\d+)\)", r"NUMBER(\1)", ddl)
        ddl = re.sub(r"\bNUMBER\b", "NUMBER", ddl)
        ddl = re.sub(r"\bDATE\b", "TIMESTAMP_NTZ", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"CLOB", "TEXT", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"BLOB", "BINARY", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"TABLESPACE\s+\w+", "", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"STORAGE\s*\(.*?\)", "", ddl, flags=re.DOTALL | re.IGNORECASE)
        ddl = re.sub(r"ENABLE", "", ddl, flags=re.IGNORECASE)
        ddl = re.sub(r"DISABLE", "", ddl, flags=re.IGNORECASE)
    except Exception as e:
        return f"-- Error in fallback conversion: {str(e)}"
    return ddl.strip()

# ==== UI ====
def main():
    st.set_page_config(page_title="Oracle to Snowflake Code Converter", layout="wide")
    st.title("ðŸ§  Oracle to Snowflake Intelligent Converter")
    st.markdown("Paste any Oracle SQL code â€” tables, procedures, functions â€” and get Snowflake-compatible SQL.")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Oracle SQL Code")
        oracle_code = st.text_area("Paste Oracle SQL", value="", height=400)

    with col2:
        st.subheader("Snowflake-Compatible Output")
        if oracle_code:
            converted = intelligent_convert_oracle_to_snowflake(oracle_code)
            if converted.startswith("-- Error"):
                st.warning("Parser failed â€” falling back to regex-based conversion.")
                converted = fallback_regex_conversion(oracle_code)
            st.text_area("Snowflake SQL", value=converted, height=400)
            st.download_button("Download Converted SQL", converted, file_name="converted_snowflake.sql")

if __name__ == "__main__":
    main()
